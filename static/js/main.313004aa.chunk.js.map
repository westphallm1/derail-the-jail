{"version":3,"sources":["img/jac_logo.png","components/Header.tsx","img/bg_large.jpg","img/bg_large2.jpg","img/jail_demographics.png","pages/Home.tsx","components/Footer.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["className","src","logo","to","style","backgroundImage","bgLarge","Button","variant","jailDemographics","bgLarge2","App","Header","path","component","Home","Footer","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.313004aa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/jac_logo.0f48cbde.png\";","import React from 'react';\r\nimport logo from '../img/jac_logo.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default ({...props}) => {\r\n  return (\r\n    <div className=\"Header\">\r\n      <div className=\"img-holder\">\r\n        <img src={logo}/>\r\n        <span>Derail the Dane County Jail</span>\r\n      </div>\r\n      <div className=\"link-holder\">\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/about_us\">About Us</Link>\r\n        <Link to=\"/updates\">Updates</Link>\r\n        <Link to=\"/get_involved\">Get Invovled</Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/bg_large.04b49035.jpg\";","export default __webpack_public_path__ + \"static/media/bg_large2.b96e1d8b.jpg\";","export default __webpack_public_path__ + \"static/media/jail_demographics.cc7899ed.png\";","import { Button } from '@material-ui/core';\r\nimport React from 'react';\r\nimport bgLarge from '../img/bg_large.jpg';\r\nimport bgLarge2 from '../img/bg_large2.jpg';\r\nimport jailDemographics from '../img/jail_demographics.png';\r\n\r\nexport default ({...props}) => {\r\n  return (\r\n    <div className=\"Home\">\r\n      <div className=\"summary\">\r\n        <h1>Build the People, not the Jail!</h1>\r\n        <p>\r\n          <span className=\"bold\">Derail the Dane County Jail</span> was founded in 2020 \r\n          to oppose the construction of a new $255 million jail project in \r\n          Dane County. Amid the deepening crises of houselessness, institutional racism, \r\n          addiction, and poverty, our county leaders have chosen to prioritize building a new,\r\n          dehumanizing jail. We have come together as a community to demand the immediate \r\n          termination of the jail consolidation project, and the implementation of humane and \r\n          compassionate approaches to addressing harm, violence, and insecurity.</p>\r\n      </div>\r\n      <div className=\"hero-image\" style={{backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url(${bgLarge})`}}>\r\n        <h1>Get Involved Today!</h1>\r\n        <Button variant=\"contained\">Take Action</Button>\r\n      </div>\r\n      <div className=\"summary\">\r\n        <h1>Facts about the Jail</h1>\r\n        <div className=\"flex-row\">\r\n          <ul>\r\n            <li>\r\n              <span>\r\n                The jail disporportionately targets people of color. Over half of the people incarcerated in the dane county jail are black,\r\n                compared to just 6% of the dane county population.\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span>\r\n                Proponents of the new jail say the current jail is unsafe - but any jail is unsafe. In December, jail guards broke\r\n                an incarcerted man's hip in an altercation, then waited over 15 hours to provide him with any medical attention.\r\n                New facilities can't fix a system this deeply broken.\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span>\r\n                More humane alternatives <span className=\"bold\">are</span> possible. In August of 2021, Madison launched the \r\n                Community Alternative Response for Emergency Services (CARES). This pilot program creates two teams of \r\n                trained mental professionals to address mental health crises without the involvement of law enforcement.\r\n              </span>\r\n            </li>\r\n          </ul>\r\n          <div className=\"flex-column\">\r\n            <img src={jailDemographics} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"hero-image\" style={{backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url(${bgLarge2})`}}>\r\n        <h1>Find out More!</h1>\r\n        <Button variant=\"contained\">Resources</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport logo from '../img/jac_logo.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default ({...props}) => {\r\n  return (\r\n    <div className=\"Footer\">\r\n      <div className=\"img-holder\">\r\n        <img src={logo}/>\r\n      </div>\r\n      <div className=\"hashtags\">\r\n        <span>#DerailTheJail</span>\r\n        <span>#CareOverCages</span>\r\n      </div>\r\n      <div className=\"link-holder\">\r\n        {/** TODO twitter/FB/email links */}\r\n      </div>\r\n\r\n      <div className=\"acknowledgements\">\r\n        {/** TODO twitter/FB/email links */}\r\n        <span>\"Downtown Madison, Wisconsin, the Capitol, &amp; Lake Monona from Olin Park\" by jimflix! is licensed under CC BY-NC-ND 2.0</span>\r\n        <span>\"Bascom Hall, Madison, Wisconsin 05-19-2012 365\" by Richard Hurd is licensed under CC BY 2.0</span>\r\n    \r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport { Counter } from './features/counter/Counter';\nimport './App.scss';\nimport Header from './components/Header';\nimport { Route, Switch } from 'react-router';\nimport Home from './pages/Home';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"Page\">\n      <Header />\n\n      <Switch>\n        <Route path=\"/\" component={Home} />\n      </Switch>\n\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}